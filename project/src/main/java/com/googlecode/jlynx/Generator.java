package com.googlecode.jlynx;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Logger;

/**
 * Generates JavaBean style objects (POJOs) and JSPs based on database tables &
 * fields.
 */
final class Generator {

	static Logger logger = LoggerFactory.getLogger();

	static int tableCount = 0;

	static int progress = 0;

	static StringBuffer e = new StringBuffer("");

	public static void main(String[] args) throws Throwable {

		logger.info("1st arg: package name");
		logger.info("2nd arg (optional): schema");
		int j = 0;
		for (String arg : args)
			logger.info(++j + " => " + arg);
		if (System.getProperty("jlynx.yaml.file") == null)
			System.setProperty("jlynx.yaml.file", "./jlynx.yaml");
		logger.info("Config at: " + System.getProperty("jlynx.yaml.file"));
		String schema = args.length > 1 ? args[1] : "";
		try {
			new DAOImpl().generateCode(args[0], schema);
		} catch (Exception e) {
			logger.severe("Error: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static String generateCode(String packageName, String schema,
			String srcdir, String superClass, Connection conn) throws Exception {

		if (srcdir == null)
			srcdir = System.getProperty("user.home") + File.separator
					+ "jlynx-generated";

		StringBuffer out = new StringBuffer();

		if ("".equals(schema))
			schema = null;

		e = new StringBuffer();

		if (superClass == null)
			superClass = "";
		else
			superClass = " extends " + superClass;

		String suffix = "Bean";

		StringTokenizer st = new StringTokenizer(packageName, ".");
		String path = "";
		while (st.hasMoreTokens())
			path += File.separator + st.nextToken();

		path += File.separator;

		out.append("\n\nTimestamp: ").append(new Date());

		File srcDir = new File(srcdir + File.separator + "src" + File.separator
				+ path);

		File jspDir = new File(srcdir + File.separator + "html");

		// create src or classes dirs
		// classes.mkdirs();
		srcDir.mkdirs();
		jspDir.mkdirs();

		out.append("\n\nHTML files will be generated in: ").append(
				jspDir.getCanonicalPath());
		out.append("\nPOJO source directory: ")
				.append(srcDir.getCanonicalPath()).append("\n");
		// out.append("\nJDBC Driver: ").append(conn.getMetaData().getDriverName());
		// out.append("\nJDBC URL: ").append(conn.getMetaData().getURL());

		String javaCode;
		StringBuffer jspCode;

		String accessors;
		String flds;
		if (schema != null)
			out.append("\nFiltering on schema: ").append(schema);

		Set<String> tables = SchemaUtil.getTables(conn, schema).keySet();
		tableCount = tables.size();
		progress = 0;
		// int count = 0;
		for (String table : tables) {
			// count++;
			progress++;
			boolean create = true;
			Map<String, String> fields = SchemaUtil.getColumns(table);
			String className = StringUtils.mixedCase(table);// + suffix;

			javaCode = "// Java code generated by jLynx on " + new Date()
					+ "\n";
			jspCode = new StringBuffer();

			String msg = "<p> ** HTML code generated by jLynx on " + new Date()
					+ " ** </p>\n\n";

			jspCode.append(msg)
					.append("<fieldset>\n<legend> jLynx Generated ")
					.append(table)
					.append(" Form </legend>"
							+ "\n<form action='#' method='post'>\n");

			if (packageName != null && !"".equals(packageName)) {
				javaCode += "package " + packageName + ";\n\n";
				jspCode.append("<p>\n\tPOJO = ").append(packageName)
						.append(".").append(className).append("\n</p>\n");

			} else
				jspCode.append("<p>\n\tPOJO = ").append(className)
						.append("\n</p>\n");

			jspCode.append("<p>\n\t<input type='submit' value='Submit'/>\n</p>");

			e.append("  <entity class='").append(packageName).append(".")
					.append(className).append("' name='")
					.append(table.toLowerCase()).append("' />\n");

			StringBuffer j5 = new StringBuffer(javaCode);
			j5.append("//@Entity(name=\"").append(table).append("\")\n");
			j5.append("public class ").append(className).append(suffix)
					.append(" implements java.io.Serializable {\n");
			javaCode += "public class " + className + superClass
					+ " implements java.io.Serializable {\n";

			accessors = "";
			flds = "";
			String flds2 = "";
			Map<String, String> pk = SchemaUtil.getPrimaryKeys(table);

			if (pk.size() == 0) {

				String wrng = "Warning: Table <<"
						+ table
						+ ">> does not have a primary key defined! jLynx requires a primary key.";
				out.append(wrng);

			}

			String id = "";
			for (String field : SchemaUtil.getColumns(table).keySet()) {
				for (Object pkValue : pk.keySet()) {
					if (pkValue instanceof String
							&& field.equalsIgnoreCase((String) pkValue)) {
						id = "\n\n    // @Id";
						break;
					} else
						id = "";
				}
				accessors += StringUtils.createAccessor(field,
						fields.get(field));// name,type

				flds += "\n\n    private " + fields.get(field) + " " + field
						+ ";";

				flds2 += id + "\n    private " + fields.get(field) + " "
						+ field + ";";

				jspCode.append("\n<div style='margin: 10px'>\n\t<label for='")
						.append(field).append("'>").append(field.toUpperCase())
						.append("</label><br>");

				jspCode.append("\n\t<input size='30' type='text' name='")
						.append(field).append("' />\n</div>");

			}

			jspCode.append("\n</form>\n</fieldset>\n");

			javaCode += flds + accessors + "\n\n}";
			j5.append(flds2).append(accessors).append("\n\n}");

			String fileName = srcDir.getCanonicalPath() + File.separator
					+ className + ".java";

			if (create) {

				File file;// = new File(fileName);
				if (true) {// (file.canRead() == false && file.createNewFile())
					// {
					FileOutputStream fout;
					fileName = srcDir.getCanonicalPath() + File.separator
							+ className + suffix + ".java";
					file = new File(fileName);
					fout = new FileOutputStream(file);
					fout.write(new String(j5).getBytes());
					fout.flush();
					fout.close();
					out.append("\n\nCreating POJO... ").append(fileName);

				}

				// write a jsp file now
				File file2 = new File(jspDir.getCanonicalPath()
						+ File.separator + table.toLowerCase() + ".html");
				out.append("\nCreating HTML... ").append(
						file2.getCanonicalPath());
				FileOutputStream fout2 = new FileOutputStream(file2);
				fout2.write(new String(jspCode).getBytes());
				fout2.flush();
				fout2.close();

			}

		}

		conn.close();
		conn = null;
		logger.info(out.toString() + "\n");
		return out.toString();

	}
}